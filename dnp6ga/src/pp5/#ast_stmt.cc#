/* File: ast_stmt.cc
 * -----------------
 * Implementation of statement node classes.
 */
#include "ast_stmt.h"
#include "ast_type.h"
#include "ast_decl.h"
#include "ast_expr.h"
#include "scope.h"
#include "errors.h"
#include "string.h"
int breakFlag = 0;
int hasMain = 0;
Program::Program(List<Decl*> *d) {
    Assert(d != NULL);
    (decls=d)->SetParentAll(this);
}

void Program::Check() {
    nodeScope = new Scope();
    decls->DeclareAll(nodeScope);
    decls->CheckAll();
}


void Program::EmitCode() {
    /* pp5: here is where the code generation is kicked off.
     *      The general idea is perform a tree traversal of the
     *      entire program, generating instructions as you go.
     *      Each node can have its own way of translating itself,
     *      which makes for a great use of inheritance and
     *      polymorphism in the node classes.
     */
     CodeGenerator *cg = new CodeGenerator();
     decls->EmitAllGlobal(cg);
    if(hasMain == 0)
        ReportError::NoMainFound(); 
    else
    	cg->DoFinalCodeGen();
}

StmtBlock::StmtBlock(List<VarDecl*> *d, List<Stmt*> *s) {
    Assert(d != NULL && s != NULL);
    (decls=d)->SetParentAll(this);
    (stmts=s)->SetParentAll(this);
}
void StmtBlock::Check() {
    nodeScope = new Scope();
//     std::cout<<"sb"<<std::endl;
    decls->DeclareAll(nodeScope);
    decls->CheckAll();
    stmts->CheckAll();
}

ConditionalStmt::ConditionalStmt(Expr *t, Stmt *b) { 
    Assert(t != NULL && b != NULL);
    (test=t)->SetParent(this); 
    (body=b)->SetParent(this);
}

void ConditionalStmt::Check() {
    body->Check();
}

ForStmt::ForStmt(Expr *i, Expr *t, Expr *s, Stmt *b): LoopStmt(t, b) { 
    Assert(i != NULL && t != NULL && s != NULL && b != NULL);
    (init=i)->SetParent(this);
    (step=s)->SetParent(this);
}

IfStmt::IfStmt(Expr *t, Stmt *tb, Stmt *eb): ConditionalStmt(t, tb) { 
    Assert(t != NULL && tb != NULL); // else can be NULL
    elseBody = eb;
    if (elseBody) elseBody->SetParent(this);
}
void ForStmt::Check()
{
  if(init != NULL)
	init->Check();
 if(test!= NULL)
  test->Check();
 if(step!= NULL)
	step->Check();	
  if(!test->getExprType()->IsEquivalentTo(Type::boolType))
    {
//           ReportError::TestNotBoolean(test);

    }
 body->Check();

}
void WhileStmt::Check()
{
  test->Check();
  if(!test->getExprType()->IsEquivalentTo(Type::boolType))
    {
  //         ReportError::TestNotBoolean(test);

   }
 body->Check();


}

void IfStmt::Check() {

     test->Check();
    if(!test->getExprType()->IsEquivalentTo(Type::boolType))
    {          
    //       ReportError::TestNotBoolean(test);    

    }
    ConditionalStmt::Check();

    if (elseBody) elseBody->Check();
}


ReturnStmt::ReturnStmt(yyltype loc, Expr *e) : Stmt(loc) { 
    Assert(e != NULL);
    (expr=e)->SetParent(this);
}
  
PrintStmt::PrintStmt(List<Expr*> *a) {    
    Assert(a != NULL);
    (args=a)->SetParentAll(this);
}
void PrintStmt::Check()
{
   for(int i = 0; i< args->NumElements(); i++)
   {
            args->Nth(i)->Check();
            if(args->Nth(i)->getExprType()->IsEquivalentTo(Type::errorType))
                    {   }
           else if(!(args->Nth(i)->getExprType())->IsEquivalentTo(Type::intType) && ! (args->Nth(i)->getExprType())->IsEquivalentTo(Type::stringType) &&  !(args->Nth(i)->getExprType())->IsEquivalentTo(Type::boolType))
      {}//           ReportError::PrintArgMismatch(args->Nth(i),i+1,args->Nth(i)->getExprType());
                                

  }
}
void BreakStmt::Check()
{
   Node* tmp = this;
   int flag = 0;
   while(tmp->GetParent())
    {

     if(tmp->IsLoopStmt())
      {

         flag = 1;
         break;
       }
      tmp = tmp->GetParent();
 
  }
     //ReportError::BreakOutsideLoop(this);


}
void ReturnStmt::Check()
{
/*
    Node* tmp = this;
   int flag = 0;
   while(tmp->GetParent())
    {

     if(tmp->IsFnDecl())
      {

         flag = 1;
         break;
       }
      tmp = tmp->GetParent();

  }
  if(flag == 1)
  {
         FnDecl* fd = dynamic_cast<FnDecl*>(tmp);
         if(expr->getExprType()->IsEquivalentTo(Type::nullType))
         {
         //       if(!fd->getReturnType()->IsEquivalentTo(Type::nullType))
	 //		 ReportError::ReturnMismatch(this,Type::nullType,fd->getReturnType());

         }
        else{ 
              if(!expr->getExprType()->IsEquivalentTo(fd->getReturnType()))
             
                 {}//ReportError::ReturnMismatch(this,expr->getExprType(),fd->getReturnType());   
  	} 
 }
*/

}

Location* StmtBlock::Emit(CodeGenerator *cg){

  
// char *s = cg->NewLabel();
    //cg->GenLabel(s);
   decls->EmitAll(cg);
   stmts->EmitAll(cg);
   
 return NULL;
}


Location* IfStmt::Emit(CodeGenerator *cg)
{

    Location *t = test->Emit(cg);
    char *s1 = cg->NewLabel();
    cg->GenIfZ(t,s1);
    body->Emit(cg);
  //  cg->GenGoto(s2);
    if(elseBody != NULL)
       {
              char *s2 = cg->NewLabel();
               if(breakFlag == 1)
			{breakFlag = 0;}
 	       else
               		{cg->GenGoto(s2);}
		cg->GenLabel(s1);
                elseBody->Emit(cg);
              cg->GenLabel(s2);
                                         
        }
     else{
           if(breakFlag == 1)
                        {breakFlag = 0;}
           else
           {	cg->GenGoto(s1);}
           cg->GenLabel(s1);
         }

  
  return NULL;
}

Location* WhileStmt::Emit(CodeGenerator *cg)
{

  s1 = cg->NewLabel();
   cg->GenLabel(s1);
   Location *t = test->Emit(cg);
  s2 = cg->NewLabel();
  cg->GenIfZ(t,s2);
  body->Emit(cg);
   cg->GenGoto(s1);
   cg->GenLabel(s2);    
   return NULL;
}
Location* ForStmt::Emit(CodeGenerator *cg)
{
  if(init != NULL)
	init->Emit(cg);
   s1 = cg->NewLabel();
   s2 = cg->NewLabel();

  cg->GenLabel(s1);
  Location *t = NULL;
  if(test != NULL)
 	t = test->Emit(cg);
  cg->GenIfZ(t,s2);
  body->Emit(cg);
   if(step!= NULL)
   	step->Emit(cg);
  cg->GenGoto(s1);
  cg->GenLabel(s2);
 


 return NULL;
}
Location* PrintStmt::Emit(CodeGenerator *cg)
{
   for(int i = 0; i< args->NumElements(); i++)
     {
             // cg->GenPushParam(args->Nth(i)->Emit(cg));
              
              if(args->Nth(i)->getExprType()->IsEquivalentTo(Type::boolType)) 
              {     
                   if(args->Nth(i)->IsArrayAccessType())
                    {

                        cg->GenPushParam(cg->GenLoad(args->Nth(i)->Emit(cg),0));

                    }
                    else
  
       	             cg->GenPushParam(args->Nth(i)->Emit(cg));
                      
                           //push false/true

             	cg->GenLCall("_PrintBool",false);
              

		}
 		else if(args->Nth(i)->getExprType()->IsEquivalentTo(Type::stringType))
                { 
                        if(args->Nth(i)->IsArrayAccessType())
                    {

                        cg->GenPushParam(cg->GenLoad(args->Nth(i)->Emit(cg),0));

                    }
                    else

                        cg->GenPushParam(args->Nth(i)->Emit(cg));

		       cg->GenLCall("_PrintString",false);
                }
              else
                 {
                   if(args->Nth(i)->IsArrayAccessType())
                    {

			cg->GenPushParam(cg->GenLoad(args->Nth(i)->Emit(cg),0));

                    }
                    else
                    	cg->GenPushParam(args->Nth(i)->Emit(cg));
     
                   cg->GenLCall("_PrintInt",false);
                  }
              cg->GenPopParams(4);
 

     }
return NULL;

}

Location* ReturnStmt::Emit(CodeGenerator *cg)
{
   Location *l =  expr->Emit(cg);
   
   cg->GenReturn(l);

   return l;
}

Location* BreakStmt::Emit(CodeGenerator *cg)
{
   
 Node * tmp = this;
 while(tmp != NULL)
 {
    if(tmp->IsLoopStmt())
	break;
   tmp = tmp->GetParent();
  }
  LoopStmt* tmp1 = dynamic_cast<LoopStmt*>(tmp); 
  cg->GenGoto(tmp1->getLabel2());
  breakFlag = 1;
  return NULL;
}
